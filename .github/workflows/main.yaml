name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
    - uses: actions/checkout@v2

    # ----- Backend setup -----
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install backend dependencies
      working-directory: backend
      run: |
        pip install -r requirements.txt

    - name: Run backend tests
      working-directory: backend
      run: |
        if ls tests/*.py 1> /dev/null 2>&1; then
          python -m unittest discover -s tests
        else
          echo "No backend tests found"
        fi

    - name: Lint backend
      working-directory: backend
      run: |
        pip install flake8
        flake8 .

    # ----- Frontend setup -----
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    - name: Lint frontend
      working-directory: frontend
      run: |
        # Install ESLint and Airbnb config dependencies
        npm install --save-dev \
          eslint \
          @babel/core \
          @babel/eslint-parser \
          eslint-config-airbnb \
          eslint-plugin-import \
          eslint-plugin-jsx-a11y \
          eslint-plugin-react \
          eslint-plugin-react-hooks

        # Create ESLint config file
        echo '{
          "parser": "@babel/eslint-parser",
          "parserOptions": {
            "requireConfigFile": false,
            "babelOptions": {
              "presets": ["@babel/preset-react"]
            },
            "ecmaVersion": 2021,
            "sourceType": "module",
            "ecmaFeatures": {
              "jsx": true
            }
          },
          "env": {
            "browser": true,
            "es2021": true
          },
          "extends": ["airbnb"],
          "plugins": ["react"],
          "rules": {}
        }' > .eslintrc.json

        # Install @babel/preset-react required by babelOptions
        npm install --save-dev @babel/preset-react

        # Run ESLint on src directory (non-failing)
        npx eslint src --ext .js,.jsx || true
      

      # ----- Docker build & push -----
    - name: Build & Push Docker images BACKEND
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker build -t $DOCKER_USERNAME/dashboard-backend:v2 ./backend
        # docker build -t $DOCKER_USERNAME/dashboard-frontend:v2 ./frontend
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push $DOCKER_USERNAME/dashboard-backend:v2
        # docker push $DOCKER_USERNAME/dashboard-frontend:v2

    - name: Build & Push Docker images FRONTEND
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker build -t $DOCKER_USERNAME/dashboard-frontend:v2 ./frontend
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push $DOCKER_USERNAME/dashboard-frontend:v2

    # ----- Kubernetes deploy -----
    - name: Set up kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to local cluster
      run: |
        kubectl apply -f Kubernetes_yamls/namespace-dashboard.yaml
        kubectl apply -f Kubernetes_yamls/backend-deployment.yaml
        kubectl apply -f Kubernetes_yamls/backend-service.yaml
        kubectl apply -f Kubernetes_yamls/frontend-deployment.yaml
        kubectl apply -f Kubernetes_yamls/frontend-service.yaml
